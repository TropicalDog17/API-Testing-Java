Index: src/main/java/utils/RunTestFromMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.platform.launcher.Launcher;\r\nimport org.junit.platform.launcher.LauncherDiscoveryRequest;\r\n\r\nimport org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\r\nimport org.junit.platform.launcher.core.LauncherFactory;\r\nimport org.junit.platform.launcher.listeners.SummaryGeneratingListener;\r\nimport org.junit.platform.launcher.listeners.TestExecutionSummary;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.util.*;\r\n\r\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\r\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;\r\n\r\npublic class RunTestFromMain {\r\n    private String testSuiteName;\r\n    private final HashMap<String, ArrayList<String>> testSuitesList = Constant.TEST_SUITES_LIST;\r\n\r\n    SummaryGeneratingListener listener = new SummaryGeneratingListener();\r\n\r\n\r\n    public void runTest(String testSuiteId) {\r\n        for (String key : testSuitesList.keySet()) {\r\n            if (testSuitesList.get(key)\r\n                    .contains(testSuiteId)) {\r\n                testSuiteName = key;\r\n            }\r\n        }\r\n        Class<?> TestSuiteClass = selectClass(testSuiteName).getJavaClass();\r\n        Method[] methodList = TestSuiteClass.getDeclaredMethods();\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\"Choose a test case: \" + \"0-\" + (methodList.length - 1));\r\n        System.out.println(\"Enter: run all test cases\");\r\n        //Print all test case\r\n        for (int i = 0; i < methodList.length; i++) {\r\n            System.out.println(i + \": \" + methodList[i].getName());\r\n        }\r\n        //User choose test case to run\r\n        String index = sc.nextLine()\r\n                .trim();\r\n        System.out.println(index);\r\n\r\n\r\n        LauncherDiscoveryRequest request;\r\n        if (index.isEmpty()) {\r\n            request = LauncherDiscoveryRequestBuilder.request()\r\n                    .selectors(selectClass(testSuiteName)) //Run all test\r\n                    .build();\r\n        } else {\r\n            int intIndex = Integer.parseInt(index);\r\n            request = LauncherDiscoveryRequestBuilder.request()\r\n                    .selectors(selectMethod(selectClass(testSuiteName).getJavaClass(), methodList[intIndex].getName())) //Run\r\n                    .build();\r\n        }\r\n        Launcher launcher = LauncherFactory.create();\r\n        launcher.discover(request);\r\n        launcher.registerTestExecutionListeners(listener);\r\n        launcher.execute(request);\r\n        System.out.println(testSuiteName);\r\n    }\r\n\r\n    public void displayTestResult() {\r\n        TestExecutionSummary summary = this.listener.getSummary();\r\n        System.out.println(summary.getTestsFoundCount());\r\n        System.out.println(\"Test succeeded: \" + summary.getTestsSucceededCount());\r\n        System.out.println(\"Test failed: \" + summary.getTestsFailedCount());\r\n        List<TestExecutionSummary.Failure> failedTests = summary.getFailures();\r\n        if (failedTests.size() > 0) {\r\n            for (TestExecutionSummary.Failure test : failedTests) {\r\n                System.out.println(test.getTestIdentifier()\r\n                        .getDisplayName());\r\n                System.out.println(test.getException()\r\n                        .toString());\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/utils/RunTestFromMain.java b/src/main/java/utils/RunTestFromMain.java
--- a/src/main/java/utils/RunTestFromMain.java	
+++ b/src/main/java/utils/RunTestFromMain.java	
@@ -65,6 +65,7 @@
         System.out.println("Test succeeded: " + summary.getTestsSucceededCount());
         System.out.println("Test failed: " + summary.getTestsFailedCount());
         List<TestExecutionSummary.Failure> failedTests = summary.getFailures();
+        //If exists failure, print it
         if (failedTests.size() > 0) {
             for (TestExecutionSummary.Failure test : failedTests) {
                 System.out.println(test.getTestIdentifier()
